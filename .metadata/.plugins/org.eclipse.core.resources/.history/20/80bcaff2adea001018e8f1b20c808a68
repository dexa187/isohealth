package com.isobar.isohealth.services;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.codehaus.jackson.map.ObjectMapper;

import com.isobar.isohealth.GraphConstants;
import com.isobar.isohealth.models.DiabetesMeasurement;
import com.isobar.isohealth.models.DiabetesMeasurementFeed;
import com.isobar.isohealth.models.FitnessActivity;
import com.isobar.isohealth.models.NewFitnessActivity;
import com.isobar.isohealth.models.User;

public class DiabetesMeasurementService {
	public static DiabetesMeasurementFeed getDiabetesMeasurementFeed(String code) throws Exception {
		User user = UserService.getUser(code);
		ObjectMapper mapper = new ObjectMapper(); 
		String url = GraphConstants.REST_URL + user.getDiabetes();
		HttpURLConnection conn  = (HttpURLConnection) new URL(url).openConnection();
		conn.setRequestProperty("Authorization", "Bearer " + code);
		conn.setRequestProperty("Accept", GraphConstants.MEDIA_DIABETES_MEASUREMENT_FEED);

		if (conn.getResponseCode() != 200) {
			throw new IOException(conn.getResponseMessage());
		}

		BufferedReader rd = new BufferedReader(new InputStreamReader(
				conn.getInputStream()));
		DiabetesMeasurementFeed diabetesMeasurementFeed = mapper.readValue(rd, DiabetesMeasurementFeed.class);
		conn.disconnect();
		return diabetesMeasurementFeed;
	}
	
	public static DiabetesMeasurement getDiabetesMeasurement(
			String url, String code) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		url = GraphConstants.REST_URL + url;
		HttpURLConnection conn = (HttpURLConnection) new URL(url)
				.openConnection();
		conn.setRequestProperty("Accept",
				GraphConstants.MEDIA_DIABETES_MEASUREMENT);
		conn.setRequestProperty("Authorization", "Bearer " + code);

		if (conn.getResponseCode() != 200) {
			throw new IOException(conn.getResponseMessage());
		}

		BufferedReader rd = new BufferedReader(new InputStreamReader(
				conn.getInputStream()));
		DiabetesMeasurement diabetesMeasurement = mapper.readValue(
				rd, DiabetesMeasurement.class);
		conn.disconnect();
		return diabetesMeasurement;
	}

	public static DiabetesMeasurement updateDiabetesMeasurement(DiabetesMeasurement activity, String code) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		String url = GraphConstants.REST_URL + activity.getUri();
		HttpURLConnection conn = (HttpURLConnection) new URL(url)
				.openConnection();
		conn.setRequestMethod("PUT");
		conn.setRequestProperty("Content-Type",
				GraphConstants.MEDIA_DIABETES_MEASUREMENT);
		conn.setRequestProperty("Authorization", "Bearer " + code);
		conn.setRequestProperty("Content-Length", "nnn");
		conn.setUseCaches(false);
		conn.setDoInput(true);
		conn.setDoOutput(true);

		mapper.writeValue(conn.getOutputStream(), activity);
		
		if (conn.getResponseCode() != 200) {
			throw new IOException(conn.getResponseMessage());
		}

		BufferedReader rd = new BufferedReader(new InputStreamReader(
				conn.getInputStream()));
		activity = mapper.readValue(rd, DiabetesMeasurement.class);
		conn.disconnect();
		return activity;
	}
	
	public static void createDiabetesMeasurement(
			DiabetesMeasurement activity, String code) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		User user = UserService.getUser(code);
		String url = GraphConstants.REST_URL
				+ user.getDiabetes();
		HttpURLConnection conn = (HttpURLConnection) new URL(url)
				.openConnection();
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Content-Type",
				GraphConstants.media);
		conn.setRequestProperty("Authorization", "Bearer " + code);
		conn.setRequestProperty("Content-Length", "nnn");
		conn.setUseCaches(false);
		conn.setDoInput(true);
		conn.setDoOutput(true);

		mapper.writeValue(conn.getOutputStream(), activity);
		
		if (conn.getResponseCode() != 201) {
			throw new IOException(conn.getResponseMessage());
		}
		conn.disconnect();
	}
}
