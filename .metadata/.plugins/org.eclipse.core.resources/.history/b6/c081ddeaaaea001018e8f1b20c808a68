package test.com.isobar.isohealth;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.codehaus.jackson.map.ObjectMapper;

import junit.framework.TestCase;

import com.isobar.isohealth.GraphConstants;
import com.isobar.isohealth.models.DiabetesMeasurement;
import com.isobar.isohealth.models.DiabetesMeasurementFeed;
import com.isobar.isohealth.models.FitnessActivity;
import com.isobar.isohealth.models.NewFitnessActivity;
import com.isobar.isohealth.models.User;
import com.isobar.isohealth.models.DiabetesMeasurementFeed.Item;
import com.isobar.isohealth.services.DiabetesMeasurementService;
import com.isobar.isohealth.services.UserService;

public class DiabetesMeasurementServiceTest extends TestCase {
	
	public void testGetDiabetesMeasurementFeed() {
		try {
			DiabetesMeasurementFeed diabetesMeasurementFeed = DiabetesMeasurementService.getDiabetesMeasurementFeed(GraphConstants.AUTH_CODE);
			System.out.println("DiabetesMeasurementService: " + diabetesMeasurementFeed.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void testGetDiabetesMeasurement() {
		try {
			DiabetesMeasurementFeed diabetesMeasurementFeed = DiabetesMeasurementService.getDiabetesMeasurementFeed(GraphConstants.AUTH_CODE);
			List<DiabetesMeasurement> diabetesMeasurement =  new ArrayList<DiabetesMeasurement>();
			for (Item item : diabetesMeasurementFeed.getItems()) {
				DiabetesMeasurement activity = DiabetesMeasurementService.getDiabetesMeasurement(item.getUri(),GraphConstants.AUTH_CODE);
				System.out.println("DiabetesMeasurement: " + activity.toString());
				diabetesMeasurement.add(activity);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static DiabetesMeasurement updateDiabetesMeasurement(FitnessActivity activity, String code) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		String url = GraphConstants.REST_URL + activity.getUri();
		HttpURLConnection conn = (HttpURLConnection) new URL(url)
				.openConnection();
		conn.setRequestMethod("PUT");
		conn.setRequestProperty("Content-Type",
				GraphConstants.MEDIA_FITNESS_ACTIVITY);
		conn.setRequestProperty("Authorization", "Bearer " + code);
		conn.setRequestProperty("Content-Length", "nnn");
		conn.setUseCaches(false);
		conn.setDoInput(true);
		conn.setDoOutput(true);;

		mapper.writeValue(conn.getOutputStream(), activity);
		
		if (conn.getResponseCode() != 200) {
			throw new IOException(conn.getResponseMessage());
		}

		BufferedReader rd = new BufferedReader(new InputStreamReader(
				conn.getInputStream()));
		activity = mapper.readValue(rd, FitnessActivity.class);
		conn.disconnect();
		return activity;
	}
	
	public static void createFitnessActivity(
			NewFitnessActivity activity, String code) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		User user = UserService.getUser(code);
		String url = GraphConstants.REST_URL
				+ user.getFitness_activities();
		HttpURLConnection conn = (HttpURLConnection) new URL(url)
				.openConnection();
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Content-Type",
				GraphConstants.MEDIA_NEW_FITNESS_ACTIVITY);
		conn.setRequestProperty("Authorization", "Bearer " + code);
		conn.setRequestProperty("Content-Length", "nnn");
		conn.setUseCaches(false);
		conn.setDoInput(true);
		conn.setDoOutput(true);;

		mapper.writeValue(conn.getOutputStream(), activity);
		
		if (conn.getResponseCode() != 201) {
			throw new IOException(conn.getResponseMessage());
		}
		conn.disconnect();
	}
}
